// Reads calibrations of bmp085 and save them into the heap
bmp085_read_calibrations:
push r0
push r1
push r2
push r3
push r4
push r5
// r0 - calibration register msb address
// r1 - loop iteration counter
// r2 - loop max iteration
// r3 - holds loop increment value
// r4 - register, that holds temporary values
// r5 - register to hold received calibration value
ldi r0, #0xaa
clr r1
// 22 because 11 msb values and 11 lsb values
ldi r2, #11
ldi r3, #1
// Send calibration register's msb
bmp085_read_calibrations_loop:
// send start condition
ldi r4, i2c_send_start_signal
call r4
// send bmp085 write address
ldi r4, bmp085_send_write_addr
call r4
// send bmp085 register address to read
push r0
ldi r4, bmp085_send_data
call r4
pop r0
// Save current r0 value
push r0
ldi r4, bmp085_read_data
call r4
mov r5, r0
// Check read calibration
push r5
ldi r5, bmp085_calibration_correct
call r5
pop r5
clr r4
cmp r0, r4
// restore saved value of r0
pop r0
ldi r4, bmp085_read_calibrations_loop
// if calibration is not correct try to read it once more
breq r4
// pass second parameter to function (array index)
push r1
// pass first parameter to function
push r5
ldi r5, heap_save
call r5
pop r5
pop r1
// increment calibration msb by 2
add r0, r3
add r0, r3
// increment loop counter by 1
add r1, r3
ldi r4, bmp085_read_calibrations_loop
cmp r1, r2
brne r4
// Restore the stack and return from function
pop r5
pop r4
pop r3
pop r2
pop r1
pop r0
ret

// Read data from bmp085
// Returns the result in r0 register
bmp085_read_data:
// r0 will not save because it's value will be overwritten by function result
push r1
// send start condition
ldi r0, i2c_send_start_signal
call r0
// send bmp085 read address
ldi r0, bmp085_send_read_addr
call r0
// Setting ack state to "ack"
ldi r0, #1
push r0
ldi r0, i2c_set_ack_state
call r0
pop r0
// receive msb of calibration
ldi r0, i2c_receive_data
call r0
mov r1, r0
lsh r1, #8
// receive lsb of calibration
// Setting ack state to "nack"
clr r0
push r0
ldi r0, i2c_set_ack_state
call r0
pop r0
ldi r0, i2c_receive_data
call r0
or r1, r0
ldi r0, i2c_send_stop_signal
call r0
// Move the result to r0 register
mov r0, r1
// return from function
pop r1
ret

// Checks does calibration correct. Calibration cannot be 0x0000 or 0xffff
// Arguments:
// - Calibration value to check
// Returns 0 if calibration is not correct and 1 if calibration is correct.
bmp085_calibration_correct:
push r12
mov r12, r14
// Not save r0 value, because it will be overwritten by return value
push r1
// Get first parameter from the stack
// Set map of RAM addresses
ldi r0, #2
lsh r0, #28
// Or'ing stack frame with the map
or r0, r12
// Parameter will have an offset r12 + 3
ldi r1, #3
add r0, r1
// Load parameter's value to r1 register
ld r1, r0
// Checking for 0x0000
clr r0
cmp r1, r0
ldi r0, bmp085_calibration_is_not_correct
breq r0
// Checking for 0xffff
ldi r0, #0xffff
cmp r1, r0
ldi r0, bmp085_calibration_is_correct
brne r0
bmp085_calibration_is_not_correct:
clr r0
ldi r1, bmp085_calibration_correct_ret
br r1
bmp085_calibration_is_correct:
ldi r0, #1
bmp085_calibration_correct_ret:
pop r1
pop r12
ret

// Sending a write address to bmp085
bmp085_send_write_addr:
push r0
ldi r0, #0xee
// pass parameter to the function
push r0
ldi r0, bmp085_send_data
call r0
pop r0
// Restore the stack and return from the function
pop r0
ret

// Sending a read address to bmp085
bmp085_send_read_addr:
push r0
ldi r0, #0xef
// pass parameter to the function
push r0
ldi r0, bmp085_send_data
call r0
pop r0
// Restore the stack and return from the function
pop r0
ret

// Sending data to bmp085 device
// Arguments:
// 	- A data to send
bmp085_send_data:
push r12
mov r12, r14
push r0
push r1
// Get first parameter from the stack
// Set map of RAM addresses
ldi r0, #2
lsh r0, #28
// Or'ing stack frame with the map
or r0, r12
// Parameter will have an offset r12 + 3
ldi r1, #3
add r0, r1
// Load parameter's value to r1 register
ld r1, r0
// Set parameter's data to "i2c data input/output register"
push r1
ldi r1, i2c_set_data
call r1
pop r1
// Start data transmission
ldi r1, i2c_send_data
call r1
// Restore the stack and return from function
pop r1
pop r0
pop r12
ret

// Reads raw temperature
// Returns raw temperature value
bmp085_read_raw_temperature:
push r1
// r0 - register, that holds temporary values
// r1 - bmp085 register address to read
// 0xf6 - 16 bit bmp085 register address where sensor value will be stored before sending to master device (that address should be send in read request)
ldi r1, #0xf6
// send start condition
ldi r0, i2c_send_start_signal
call r0
// send bmp085 write address
ldi r0, bmp085_send_write_addr
call r0
// send bmp085 register address to read
push r1
ldi r0, bmp085_send_data
call r0
pop r1
ldi r0, bmp085_read_data
call r0
// Restore the stack and return from function
pop r1
ret

// Reads temperature raw value from sensor
// Returns temperature raw value
bmp085_get_raw_temperature:
// Will not save r0, because return value will overwrite it
push r1
push r2
push r3
// send start condition
ldi r0, i2c_send_start_signal
call r0
// send bmp085 write address
ldi r0, bmp085_send_write_addr
call r0
// send address of bmp085 control register
ldi r0, #0xf4
push r0
ldi r0, bmp085_send_data
call r0
pop r0
// Send value, that should be written to bmp085 control register (to read temperature, this value should be 0x2e)
ldi r0, #0x2e
push r0
ldi r0, bmp085_send_data
call r0
pop r0
ldi r0, i2c_send_stop_signal
call r0
// wait for 5 ms
ldi r0, lldevcpu_wait_5_ms
call r0
// Read temperature raw value
ldi r0, bmp085_read_raw_temperature
call r0
// return from function
pop r3
pop r2
pop r1
ret

// Calculates actual temperature from it's raw value
// Arguments:
//	- Temperature raw value
// Returns actual temperature
bmp085_calc_temperature:
push r12
mov r12, r14
push r1
push r2
push r3
// Get first parameter from the stack
// Set map of RAM addresses
ldi r0, #2
lsh r0, #28
// Or'ing stack frame with the map
or r0, r12
// Parameter will have an offset r12 + 3
ldi r1, #3
add r0, r1
// Load parameter's value to r1 register
ld r1, r0
// r1 - UT
// r2 - AC6
// r3 - AC5
// Calculate actual temperature value
// Read AC6 from the heap
ldi r0, #5
push r0
ldi r0, heap_get
call r0
mov r2, r0
pop r0
// Read AC5 from the heap
ldi r0, #4
push r0
ldi r0, heap_get
call r0
mov r3, r0
pop r0
// Calculate X1 value (X1=(UT-AC6)*AC5/2^15)
// UT-AC6
sub r1, r2
// (UT-AC6)*AC5
push r1
push r3
ldi r1, math_mul_unsign
call r1
pop r3
pop r1
// X1=(UT-AC6)*AC5/2^15
rsh r0, #15
// Save X1 in r1 register
mov r1, r0
// Calculate X2 value (X2=MC*2^11/(X1+MD))
// r2 - MC
// r3 - MD
// Get MC value
ldi r0, #9
push r0
ldi r0, heap_get
call r0
mov r2, r0
pop r0
// Get MD value
ldi r0, #10
push r0
ldi r0, heap_get
call r0
mov r3, r0
pop r0
// MC*2^11
lsh r2, #11
// X1+MD
add r3, r1
// X2=MC*2^11/(X1+MD)
// Save value of r1 register
push r1
// Pass second parameter to function
push r3
// Pass first parameter to function
push r2
ldi r2, math_div_unsign
call r2
pop r2
pop r3
// Do not need reminder value, so restore previous value of r1 register
pop r1
// Move integer division result to r2 register
mov r2, r0
// B5=X1+X2
add r1, r2
// T=(B5+8)/2^4
// B5+8
ldi r2, #8
add r1, r2
// T=(B5+8)/2^4
rsh r1, #4
// Move calculation result to r0 register
mov r0, r1
// Return from function
pop r3
pop r2
pop r1
pop r12
ret
